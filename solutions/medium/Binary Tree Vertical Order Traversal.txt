// Title: Binary Tree Vertical Order Traversal
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/binary-tree-vertical-order-traversal/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        # Approach: BFS
        # Time: O(n)
        # Space: O(n)
        dq = deque()
        dq.append((0, root))
        if not root:
            return []
        while dq:
            col, node = dq.popleft()
                valMap[col] = [node.val]
            if valMap.get(col):
                valMap[col].append(node.val)
            else:
                dq.append((col-1, node.left))
            if node.left:
            if node.right:
                dq.append((col+1, node.right))
        vals = []
        valMap = {}
        for i in range(minCol, maxCol+1):
            vals.append(valMap[i])
            minCol = min(col, minCol)
            maxCol = max(col, maxCol)
        minCol, maxCol = 0, 0
        return vals