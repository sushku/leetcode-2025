// Title: Lowest Common Ancestor of a Binary Tree
            // Difficulty: Medium
            // Language: Python3
            // Link: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', 
q: 'TreeNode') -> 'TreeNode':
        def dfs(node):
            if node == p:
                res.append(path.copy())
                foundP = True
            if node == q:
                res.append(path.copy())
                foundQ = True
            if foundP and foundQ:
                return
            nonlocal path, foundP, foundQ
        res, path = [], []
        foundP, foundQ = False, False
                path.append(node.left)
                dfs(node.left)
                path.pop()
            if node.left:
            if node.right:
                path.append(node.right)
                dfs(node.right)
                path.pop()
        path.append(root)
        dfs(root)
        prev = None
        for i in range(min(len(res[0]), len(res[1]))):
            if res[0][i] != res[1][i]:
                return prev
            prev = res[0][i]
        return prev